apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    io.kompose.service: server
  name: server
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: server
  strategy: {}
  template:
    metadata:
      labels:
        io.kompose.service: server
    spec:
      containers:
        - env:
            - name: INSTANCE_NAME
              valueFrom:
                configMapKeyRef:
                  key: INSTANCE_NAME
                  name: env
            - name: NODE_ENV
              value: production
            - name: ORCID_CLIENT_ID
              valueFrom:
                secretKeyRef:
                  key: ORCID_CLIENT_ID
                  name: orcid-secret
            - name: ORCID_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  key: ORCID_CLIENT_SECRET
                  name: orcid-secret
            - name: POSTGRES_DB
              valueFrom:
                secretKeyRef:
                  key: postgresql-database
                  name: "{{ .Values.rdssecret }}"
            - name: POSTGRES_HOST
              valueFrom:
                secretKeyRef:
                  key: postgresql-host
                  name: "{{ .Values.rdssecret }}"
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: postgresql-password
                  name: "{{ .Values.rdssecret }}"
            - name: POSTGRES_PORT
              valueFrom:
                secretKeyRef:
                  key: postgresql-port
                  name: "{{ .Values.rdssecret }}"
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  key: postgresql-username
                  name: "{{ .Values.rdssecret }}"
            - name: PUBLIC_CLIENT_HOST
              valueFrom:
                configMapKeyRef:
                  key: PUBLIC_CLIENT_HOST
                  name: env
            - name: PUBLIC_CLIENT_PORT
              valueFrom:
                configMapKeyRef:
                  key: PUBLIC_CLIENT_PORT
                  name: env
            - name: PUBLIC_CLIENT_PROTOCOL
              valueFrom:
                configMapKeyRef:
                  key: PUBLIC_CLIENT_PROTOCOL
                  name: env
            - name: PUBSWEET_SECRET
              valueFrom:
                secretKeyRef:
                  key: PUBSWEET_SECRET
                  name: orcid-secret
            - name: S3_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: S3_ACCESS_KEY_ID
                  name: "{{ .Values.s3secret }}"
            - name: S3_ACCESS_KEY_SECRET
              valueFrom:
                secretKeyRef:
                  key: S3_ACCESS_KEY_SECRET
                  name: "{{ .Values.s3secret }}"
            - name: S3_ENDPOINT
              valueFrom:
                secretKeyRef:
                  key: S3_ENDPOINT
                  name: "{{ .Values.s3secret }}"
            - name: S3_REGION
              valueFrom:
                secretKeyRef:
                  key: S3_REGION
                  name: "{{ .Values.s3secret }}"
            - name: SERVER_PORT
              valueFrom:
                configMapKeyRef:
                  key: SERVER_PORT
                  name: env
            - name: USE_SANDBOXED_ORCID
              valueFrom:
                configMapKeyRef:
                  key: USE_SANDBOXED_ORCID
                  name: env
          image: "{{ .Values.images.backend.repository }}:{{ .Values.images.backend.tag }}"
          command: ["/bin/sh", "-c"]
          args:
            - bash scripts/setupProdServer.sh;node ./startServer.js;
          name: server
          ports:
            - containerPort: {{ .Values.backend.deployment.containerPort }}
      restartPolicy: Always
status: {}