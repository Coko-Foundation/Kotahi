variables:
  IMAGE_ORG: kotahi
  IMAGE_NAME: kotahi-elife
  POSTGRES_HOST_AUTH_METHOD: trust
  POSTGRES_USER: kotahidev
  POSTGRES_PASSWORD: kotahidev
  PGUSER: kotahidev
  PGPASSWORD: kotahidev

stages:
  # - build
  - test

# build:
#   image: docker:20.10.5
#   variables:
#     DOCKER_BUILDKIT: 1
#   services:
#     - docker:20.10.5-dind
#   stage: build
#   before_script:
#     - cp app/brand-instances-configs/elife.json app/brandConfig.json
#   script:
#     - |
#       if [ -z "$DOCKERHUB_USERNAME_ELIFE" ] || [ -z "$DOCKERHUB_PASSWORD_ELIFE" ]; then echo "Not pushing" && exit 0; fi
#       docker login -u $DOCKERHUB_USERNAME_ELIFE -p $DOCKERHUB_PASSWORD_ELIFE
#       docker pull $IMAGE_ORG/$IMAGE_NAME-dev:latest || true
#       docker build --build-arg instance_name=elife --file ./Dockerfile-ci --cache-from $IMAGE_ORG/$IMAGE_NAME-dev:latest --tag $IMAGE_ORG/$IMAGE_NAME-dev:$CI_COMMIT_SHA --tag $IMAGE_ORG/$IMAGE_NAME-dev:latest .
#       docker push $IMAGE_ORG/$IMAGE_NAME-dev:$CI_COMMIT_SHA
#       docker push $IMAGE_ORG/$IMAGE_NAME-dev:latest

.test_template: &run_test_template
  image: $IMAGE_ORG/$IMAGE_NAME-dev:latest
  stage: test
  variables:
    GIT_STRATEGY: none
    # setup data for postgres image
    POSTGRES_USER: kotahidev
    POSTGRES_PASSWORD: kotahidev
    # used by psql
    PGUSER: kotahidev
    PGPASSWORD: kotahidev
    # this is used to ignore self signed certs
    #START_SERVER_AND_TEST_INSECURE: 1
  services:
    - postgres

.test_script: &run_test_script   
  - cd ${HOME}
  - cp .env.example .env
  - POSTGRES_HOST=postgres yarn test:all:$TEST_ITEM

.test_before_script: &run_test_before_script  
  - apt-get update
  - apt-get -y install postgresql-client
  - psql -h postgres -U kotahidev -d kotahidev -c "create extension pgcrypto;"
    
test-firefox:
  before_script:
    - *run_test_before_script
  <<: *run_test_template
  variables:
    TEST_ITEM: "firefox:elife"
  script:
    - *run_test_script

