# include:
#   - project: 'cokoapps/ci'
#     ref: main
#     file: 'ci-templates.yml'

variables:
  IMAGE_NAME_DEVELOPMENT: kotahi/kotahi/root-development
  CLIENT_PREPRODUCTION: $CI_REGISTRY/kotahi/kotahi/client-preproduction:$CI_COMMIT_REF_NAME
  SERVER_PREPRODUCTION: $CI_REGISTRY/kotahi/kotahi/server-preproduction:$CI_COMMIT_REF_NAME
  CLIENT_PRODUCTION: cokoapps/kotahi-client
  SERVER_PRODUCTION: cokoapps/kotahi-server
  DEPLOY_COMPOSE_FILE: docker-compose.ci.yml

stages:
  - Build development
  - Lint & Unit test
  - Build production
  - Deploy test
  - End to end testing
  - Tear down test
  - Deploy staging
  - Release
  - Publish

build development:
  stage: Build development
  interruptible: true
  image: docker:27-dind
  services:
    - docker:27-dind
  before_script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login "$CI_REGISTRY" -u "$CI_REGISTRY_USER" --password-stdin
  script:
    - docker build
      --tag $CI_REGISTRY/$IMAGE_NAME_DEVELOPMENT:$CI_COMMIT_REF_NAME.$CI_COMMIT_SHA
      -f Dockerfile .
    - docker push $CI_REGISTRY/$IMAGE_NAME_DEVELOPMENT:$CI_COMMIT_REF_NAME.$CI_COMMIT_SHA

lint:
  stage: Lint & Unit test
  interruptible: true
  image: $CI_REGISTRY/$IMAGE_NAME_DEVELOPMENT:$CI_COMMIT_REF_NAME.$CI_COMMIT_SHA
  script:
    - cd /home/node/app
    - yarn coko-lint run

build preproduction client:
  stage: Build production
  interruptible: true
  image: docker:27
  services:
    - docker:27-dind
  only:
    - main
  before_script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login "$CI_REGISTRY" -u "$CI_REGISTRY_USER" --password-stdin
  script:
    - cd packages/client
    - docker build
      --tag $CLIENT_PREPRODUCTION.$CI_COMMIT_SHA
      --tag $CLIENT_PREPRODUCTION.latest
      -f Dockerfile-production .
    - docker push $CLIENT_PREPRODUCTION.$CI_COMMIT_SHA
    - docker push $CLIENT_PREPRODUCTION.latest

build preproduction server:
  stage: Build production
  interruptible: true
  image: docker:27
  services:
    - docker:27-dind
  only:
    - main
  before_script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login "$CI_REGISTRY" -u "$CI_REGISTRY_USER" --password-stdin
  script:
    - cd packages/server
    - docker build
      --tag $SERVER_PREPRODUCTION.$CI_COMMIT_SHA
      --tag $SERVER_PREPRODUCTION.latest
      -f Dockerfile-production .
    - docker push $SERVER_PREPRODUCTION.$CI_COMMIT_SHA
    - docker push $SERVER_PREPRODUCTION.latest

deploy staging:
  stage: Deploy staging
  interruptible: false
  image: $CI_REGISTRY/cokoinfra/ansible-deployer
  services:
    - docker:27:dind
  only:
    - main
  variables:
    ANSCOMPOSE_POSTGRES_ALLOW_SELF_SIGNED_CERTIFICATES: true
    ANSCOMPOSE_USE_SANDBOXED_ORCID: true
    ANSCOMPOSE_ORCID_CLIENT_ID: $ORCID_CLIENT_ID
    ANSCOMPOSE_ORCID_CLIENT_SECRET: $ORCID_CLIENT_SECRET
    ANSCOMPOSE_INSTANCE_GROUPS: journal:journal,prc:prc,single_form:preprint1
    ANSCOMPOSE_MANUSCRIPTS_TABLE_COLUMNS: 'shortId, submission.$title, created, updated, status, author'
    COMPOSE_SERVICES: client,server
    COMPOSE_SERVICES_CLIENT_URL: kotahi.coko.app
    COMPOSE_SERVICES_CLIENT_IMAGE: $CLIENT_PREPRODUCTION.$CI_COMMIT_SHA
    COMPOSE_SERVICES_SERVER_URL: kotahi-server.coko.app
    COMPOSE_SERVICES_SERVER_IMAGE: $SERVER_PREPRODUCTION.$CI_COMMIT_SHA
  script:
    - kubectl config get-contexts
    - kubectl config use-context kotahi/agent:agent-1
    - cp $DEPLOY_COMPOSE_FILE /ansible
    - cd /ansible
    - ANSIBLE_FORCE_COLOR=true ansible-playbook bootstrap.yml -e "compose_file=$DEPLOY_COMPOSE_FILE"

deploy fly:
  stage: Deploy staging
  interruptible: false
  image: cokoapps/fly
  only:
    - main
  script:
    - FLY_API_TOKEN=$FLY_SERVER_TEST_TOKEN flyctl deploy --config .fly/kotahi-server-test.toml --image $SERVER_PREPRODUCTION.$CI_COMMIT_SHA --env APP_RELEASE=$CI_COMMIT_SHA
    - FLY_API_TOKEN=$FLY_CLIENT_TEST_TOKEN flyctl deploy --config .fly/kotahi-client-test.toml --image $CLIENT_PREPRODUCTION.$CI_COMMIT_SHA --env APP_RELEASE=$CI_COMMIT_SHA

release:
  stage: Release
  interruptible: false
  image: node:18
  when: manual
  only:
    - main
  before_script:
    - git remote set-url --push origin "https://gitlab-ci-token:$CI_RELEASE_TOKEN@gitlab.coko.foundation/kotahi/kotahi.git"
    - git config user.email "$CI_RELEASE_BOT_EMAIL"
    - git config user.name "kotahi release bot"
  script:
    - node scripts/updatePackageJson.js
    - git add -A
    - git commit -m "release version $VERSION [skip ci]"
    - git tag -d $VERSION
    - git tag $VERSION
    - git push origin HEAD:$CI_COMMIT_REF_NAME --verbose
    - git push origin $VERSION
    - echo RELEASE_VERSION=$VERSION >> version.env
  artifacts:
    reports:
      dotenv: version.env

production client:
  stage: Publish
  interruptible: false
  image: docker:27
  services:
    - docker:27-dind
  needs:
    - release
  only:
    - main
  before_script:
    - '[ -z "$RELEASE_VERSION" ] && exit 1'
    - docker login -u $DOCKERHUB_USERNAME -p $DOCKERHUB_PASSWORD
  script:
    - git fetch origin $CI_COMMIT_REF_NAME
    - git reset --hard origin/$CI_COMMIT_REF_NAME
    - cd packages/client
    - docker build --tag $CLIENT_PRODUCTION:$RELEASE_VERSION -f Dockerfile-production .
    - docker push $CLIENT_PRODUCTION:$RELEASE_VERSION

production server:
  stage: Publish
  interruptible: false
  image: docker:27
  services:
    - docker:27-dind
  needs:
    - release
  only:
    - main
  before_script:
    - '[ -z "$RELEASE_VERSION" ] && exit 1'
    - docker login -u $DOCKERHUB_USERNAME -p $DOCKERHUB_PASSWORD
  script:
    - git fetch origin $CI_COMMIT_REF_NAME
    - git reset --hard origin/$CI_COMMIT_REF_NAME
    - cd packages/server
    - docker build --tag $SERVER_PRODUCTION:$RELEASE_VERSION -f Dockerfile-production .
    - docker push $SERVER_PRODUCTION:$RELEASE_VERSION
# deploy test:
#   stage: Deploy test
#   image: $CI_REGISTRY/cokoinfra/ansible-deployer
#   services:
#     - docker:26-dind
#   environment:
#     name: review/$CI_COMMIT_REF_NAME
#     url: https://$CI_PROJECT_NAMESPACE.$CI_PROJECT_NAME.$CI_COMMIT_REF_NAME.coko.app
#     on_stop: teardown test
#   variables:
#     ANSCOMPOSE_POSTGRES_ALLOW_SELF_SIGNED_CERTIFICATES: true
#     ANSCOMPOSE_ORCID_CLIENT_ID: $ORCID_CLIENT_ID_2
#     ANSCOMPOSE_ORCID_CLIENT_SECRET: $ORCID_CLIENT_SECRET_2
#     ANSCOMPOSE_USE_SANDBOXED_ORCID: true
#     ANSCOMPOSE_INSTANCE_GROUPS: journal:journal
#     ANSCOMPOSE_MANUSCRIPTS_TABLE_COLUMNS: 'shortId, submission.$title, created, updated, status, author'
#     ANSCOMPOSE_E2E_TESTING_API: 1
#     COMPOSE_SERVICES: client,server
#     COMPOSE_SERVICES_CLIENT_URL: $CI_PROJECT_NAMESPACE.$CI_PROJECT_NAME.$CI_COMMIT_REF_NAME.coko.app
#     COMPOSE_SERVICES_CLIENT_IMAGE: $CI_REGISTRY/$IMAGE_NAME_PREPRODUCTION_CLIENT:$CI_COMMIT_REF_NAME.$CI_COMMIT_SHA
#     COMPOSE_SERVICES_SERVER_URL: $CI_PROJECT_NAMESPACE.$CI_PROJECT_NAME.$CI_COMMIT_REF_NAME.server.coko.app
#     COMPOSE_SERVICES_SERVER_IMAGE: $CI_REGISTRY/$IMAGE_NAME_PREPRODUCTION_SERVER:$CI_COMMIT_REF_NAME.$CI_COMMIT_SHA
#     do_spaces_access_key: $DIGITAL_OCEAN_SPACES_ACCESS_KEY
#     do_spaces_secret_key: $DIGITAL_OCEAN_SPACES_SECRET_KEY
#   script:
#     - kubectl config get-contexts
#     - kubectl config use-context kotahi/agent:agent-1
#     - cp $DEPLOY_COMPOSE_FILE /ansible
#     - cd /ansible
#     - ANSIBLE_FORCE_COLOR=true ansible-playbook bootstrap.yml -e "compose_file=$DEPLOY_COMPOSE_FILE"

# run end to end tests:
#   stage: End to end testing
#   image: $CI_REGISTRY/$IMAGE_NAME_DEVELOPMENT:$CI_COMMIT_REF_NAME.$CI_COMMIT_SHA
#   script:
#     - yarn dlx cypress run --browser chrome --spec 'cypress/e2e/**/**.js --config $CI_PROJECT_NAMESPACE.$CI_PROJECT_NAME.$CI_COMMIT_REF_NAME.coko.app

# teardown test:
#   stage: Tear down test
#   image: $CI_REGISTRY/cokoinfra/ansible-deployer
#   services:
#     - docker:26-dind
#   environment:
#     name: review/$CI_COMMIT_REF_NAME
#     action: stop
#   variables:
#     COMPOSE_SERVICES: client,server
#     COMPOSE_SERVICES_CLIENT_URL: $CI_PROJECT_NAMESPACE.$CI_PROJECT_NAME.$CI_COMMIT_REF_NAME.coko.app
#     COMPOSE_SERVICES_CLIENT_IMAGE: $CI_REGISTRY/$IMAGE_NAME_PREPRODUCTION_CLIENT:$CI_COMMIT_REF_NAME.$CI_COMMIT_SHA
#     COMPOSE_SERVICES_SERVER_URL: $CI_PROJECT_NAMESPACE.$CI_PROJECT_NAME.$CI_COMMIT_REF_NAME.server.coko.app
#     COMPOSE_SERVICES_SERVER_IMAGE: $CI_REGISTRY/$IMAGE_NAME_PREPRODUCTION_SERVER:$CI_COMMIT_REF_NAME.$CI_COMMIT_SHA
#     do_spaces_access_key: $DIGITAL_OCEAN_SPACES_ACCESS_KEY
#     do_spaces_secret_key: $DIGITAL_OCEAN_SPACES_SECRET_KEY
#   script:
#     - kubectl config get-contexts
#     - kubectl config use-context kotahi/agent:agent-1
#     - cd /ansible
#     - ANSIBLE_FORCE_COLOR=true ansible-playbook teardown.yml
