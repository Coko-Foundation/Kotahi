variables:
  IMAGE_ORG: kotahi
  IMAGE_NAME: kotahi-elife
  INSTANCE_GROUPS: journal:aperture,prc:colab,single_form:elife
  POSTGRES_HOST_AUTH_METHOD: trust
  POSTGRES_HOST: postgres
  POSTGRES_PORT: 5432
  POSTGRES_DB: kotahidev
  POSTGRES_USER: kotahidev
  POSTGRES_PASSWORD: kotahidev
  PGUSER: kotahidev
  PGPASSWORD: kotahidev
  S3_PROTOCOL: http
  S3_HOST: localhost
  S3_PORT: 9000
  S3_ACCESS_KEY_ID: nonRootUser
  S3_SECRET_ACCESS_KEY: nonRootPassword
  S3_BUCKET: uploads
  MINIO_ROOT_USER: admin
  MINIO_ROOT_PASSWORD: superSecretAdminPassword
  MINIO_CONSOLE_PORT: 9001
  FF_NETWORK_PER_BUILD: 'true'
  SERVICE_XSWEET_CLIENT_ID: 59a3392b-0c4f-4318-bbe2-f86eff6d3de4
  SERVICE_XSWEET_SECRET: asldkjLKJLaslkdf897kjhKUJH

stages:
  - build
  - test

build:
  image: docker:20.10.5
  variables:
    DOCKER_BUILDKIT: 1
  services:
    - docker:20.10.5-dind
  stage: build
  script:
    - |
      if [ -z "$DOCKERHUB_USERNAME_ELIFE"] || [ -z "$DOCKERHUB_PASSWORD_ELIFE" ]; then echo "Not pushing" && exit 0; fi
      docker login -u $DOCKERHUB_USERNAME_ELIFE -p $DOCKERHUB_PASSWORD_ELIFE
      docker build --file ./Dockerfile-ci --cache-from $IMAGE_ORG/$IMAGE_NAME-dev:latest --tag $IMAGE_ORG/$IMAGE_NAME-dev:$CI_COMMIT_SHA --tag $IMAGE_ORG/$IMAGE_NAME-dev:latest .
      docker push $IMAGE_ORG/$IMAGE_NAME-dev:$CI_COMMIT_SHA

lint js:
  image: $IMAGE_ORG/$IMAGE_NAME-dev:$CI_COMMIT_SHA
  stage: test
  variables:
    GIT_STRATEGY: none
  script:
    - cd ${HOME}
    - yarn lint:js

lint style:
  image: $IMAGE_ORG/$IMAGE_NAME-dev:$CI_COMMIT_SHA
  stage: test
  variables:
    GIT_STRATEGY: none
  script:
    - cd ${HOME}
    - yarn lint:style

.test_template: &run_test_template
  image: $IMAGE_ORG/$IMAGE_NAME-dev:$CI_COMMIT_SHA
  stage: test
  variables:
    GIT_STRATEGY: none
  services:
    - postgres

.test_before_script: &run_test_before_script
  - wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | apt-key add -
  - apt-get update --allow-releaseinfo-change
  - apt-get -y install postgresql-client
  - psql -h postgres -U kotahidev -d kotahidev -c "create extension pgcrypto;"
  - wget -q https://dl.min.io/server/minio/release/linux-amd64/minio
  - chmod +x minio
  - ./minio server --console-address :${MINIO_CONSOLE_PORT} /data &
  - wget -q https://dl.min.io/client/mc/release/linux-amd64/mc
  - chmod +x mc
  - ./mc config host add cokoServer http://localhost:$S3_PORT $MINIO_ROOT_USER $MINIO_ROOT_PASSWORD
  - ./mc admin user add cokoServer/  $S3_ACCESS_KEY_ID $S3_SECRET_ACCESS_KEY
  - ./mc admin user enable cokoServer/ $S3_ACCESS_KEY_ID
  - ./mc mb cokoServer/$S3_BUCKET
  - ./mc admin policy attach cokoServer/ readwrite --user=$S3_ACCESS_KEY_ID

.test_script: &run_test_script
  - cd ${HOME}
  - sh ./scripts/setupProdServer.sh &&
  - node ./startServer.js &
  - sleep 10 &&
  - POSTGRES_HOST=postgres yarn test:all:$TEST_ITEM

test-chrome:
  before_script:
    - *run_test_before_script
  <<: *run_test_template
  variables:
    TEST_ITEM: 'chrome'
  script:
    - *run_test_script

test-firefox:
  before_script:
    - *run_test_before_script
  <<: *run_test_template
  variables:
    TEST_ITEM: 'firefox'
  script:
    - *run_test_script
