variables:
  IMAGE_ORG: simplej
  IMAGE_NAME: simplej
  POSTGRES_HOST_AUTH_METHOD: trust
  POSTGRES_USER: kotahidev
  POSTGRES_PASSWORD: kotahidev
  PGUSER: kotahidev
  PGPASSWORD: kotahidev

stages:
  - build
  - lint
  - test
build:
  image: docker:20.10.5
  variables:
    DOCKER_BUILDKIT: 1
  services:
    - docker:20.10.5-dind
  stage: build
  before_script:
    - cp app/brand-instances-configs/aperture.json app/brandConfig.json
  script:
    - |
      if [ -z "$DOCKERHUB_USERNAME" ] || [ -z "$DOCKERHUB_PASSWORD" ]; then echo "Not pushing" && exit 0; fi
      docker login -u $DOCKERHUB_USERNAME -p $DOCKERHUB_PASSWORD
      docker build --file ./Dockerfile-ci --cache-from $IMAGE_ORG/$IMAGE_NAME:latest --tag $IMAGE_ORG/$IMAGE_NAME:$CI_COMMIT_SHA --tag $IMAGE_ORG/$IMAGE_NAME:latest .   
      docker push $IMAGE_ORG/$IMAGE_NAME:$CI_COMMIT_SHA
      docker push $IMAGE_ORG/$IMAGE_NAME:latest

lint js:
  stage: lint
  image: $IMAGE_ORG/$IMAGE_NAME:$CI_COMMIT_SHA
  script:
    - cd $WORKDIR
    - yarn eslint .

lint css:
  stage: lint
  image: $IMAGE_ORG/$IMAGE_NAME:$CI_COMMIT_SHA
  script:
    - cd $WORKDIR
    - yarn stylelint '{app,ui}/**/*.js'

.test_template: &run_test_template
  image: $IMAGE_ORG/$IMAGE_NAME:$CI_COMMIT_SHA
  stage: test
  variables:
    GIT_STRATEGY: none
  services:
    - postgres

.test_before_script: &run_test_before_script
  - apt-get update
  - apt-get -y install postgresql-client
  - psql -h postgres -U kotahidev -d kotahidev -c "create extension pgcrypto;"

.test_script: &run_test_script
  - cd ${HOME}
  - cp .env.example .env
  - POSTGRES_HOST=postgres npx test:all:$TEST_ITEM

test-chrome:
  before_script:
    - *run_test_before_script
  <<: *run_test_template
  variables:
    TEST_ITEM: 'chrome'
  script:
    - *run_test_script
