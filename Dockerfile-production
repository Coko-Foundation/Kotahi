# IMAGE FOR BUILDING
FROM node:16.19.0-alpine as build

ARG node_env
ARG server_protocol
ARG server_host
ARG server_port
ARG client_protocol
ARG client_host
ARG client_port
ARG public_client_host
ARG public_client_protocol
ARG public_client_port
ARG use_colab_email
ARG flax_site_url

ENV NODE_ENV "production"
ENV SERVER_PROTOCOL $server_protocol
ENV SERVER_HOST $server_host
ENV SERVER_PORT $server_port
ENV CLIENT_PROTOCOL $client_protocol
ENV CLIENT_HOST $client_host
ENV CLIENT_PORT $client_port
ENV PUBLIC_CLIENT_HOST $public_client_host
ENV PUBLIC_CLIENT_PORT $public_client_port
ENV PUBLIC_CLIENT_PROTOCOL $public_client_protocol
ENV USE_COLAB_EMAIL $use_colab_email
ENV FLAX_SITE_URL $flax_site_url

RUN apk add --no-cache git python3 make g++ bash

WORKDIR /home/node/app

COPY packages/client/package.json .
COPY packages/client/yarn.lock .

# Install development node modules for building webpack bundle
RUN yarn install --frozen-lockfile --production=false

COPY ./packages/client .

RUN yarn webpack --config webpack/webpack.production.config.js

# IMAGE FOR RUNNING
FROM node:16.19.0-alpine as server

WORKDIR /home/node/app

RUN mkdir ./uploads

RUN chown -R node:node .
RUN apk add --no-cache bash coreutils postgresql-client git python3 make g++
USER node

COPY ./packages/server/package.json .
COPY ./packages/server/yarn.lock .
RUN yarn install --frozen-lockfile --production=true

COPY --chown=node:node ./packages/server .
COPY --chown=node:node ./packages/client/public ./public

# COPY --chown=node:node ./app/storage ./app/storage
# COPY --chown=node:node ./app/brandConfig.json ./app/brandConfig.json

COPY --from=build /home/node/app/_build/assets ./_build/assets

VOLUME /home/node/app/uploads

ENTRYPOINT ["sh", "./scripts/setupProdServer.sh"]
CMD ["node", "./startServer.js"]
