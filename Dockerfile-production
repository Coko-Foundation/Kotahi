# IMAGE FOR BUILDING
FROM node:15.11-alpine as build

RUN apk add --no-cache git python make g++ bash su-exec

WORKDIR /home/node/app

COPY package.json .
COPY yarn.lock .

# Install production node modules for server use
RUN yarn install --frozen-lockfile --production=true
# Copy to another folder for later use
RUN mv node_modules production_node_modules

# Install development node modules for building webpack bundle
RUN yarn install --frozen-lockfile --production=false

COPY . .

ARG node_env
ARG server_protocol
ARG server_host
ARG server_port
ARG client_protocol
ARG client_host
ARG client_port

ENV NODE_ENV=$node_env
ENV SERVER_PROTOCOL=$server_protocol
ENV SERVER_HOST=$server_host
ENV SERVER_PORT=$server_port
ENV CLIENT_PROTOCOL=$client_protocol
ENV CLIENT_HOST=$client_host
ENV CLIENT_PORT=$client_port

RUN yarn webpack --config webpack/webpack.production.config.js

# IMAGE FOR RUNNING
FROM node:15.11-alpine as server

WORKDIR /home/node/app

RUN chown -R node:node .
RUN apk add bash coreutils
USER node

COPY --chown=node:node ./config ./config
COPY --chown=node:node ./public ./public
COPY --chown=node:node ./scripts ./scripts
COPY --chown=node:node ./server ./server
COPY --chown=node:node ./app/storage ./app/storage
COPY --chown=node:node ./startServer.js .

COPY --from=build /home/node/app/_build/assets ./_build
COPY --from=build /home/node/app/production_node_modules ./node_modules

ENTRYPOINT ["sh", "./scripts/setupProdServer.sh"]
CMD ["node", "./startServer.js"]
