variables:
  IMAGE_ORG: kotahi
  IMAGE_NAME: kotahi

stages:
  - build
  - deploy
  #- test

build:
  image: docker:20.10.5
  variables:
    DOCKER_BUILDKIT: 1
  services:
    - docker:20.10.5-dind
  stage: build
  before_script:
    - cp app/brand-instances-configs/ncrc.json app/brandConfig.json
  script:
    - |
      if [ -z "$DOCKERHUB_USERNAME_ELIFE" ] || [ -z "$DOCKERHUB_PASSWORD_ELIFE" ]; then echo "Not pushing" && exit 0; fi
      docker login -u $DOCKERHUB_USERNAME_ELIFE -p $DOCKERHUB_PASSWORD_ELIFE
      docker pull $IMAGE_ORG/$IMAGE_NAME:latest || true
      docker build \
      --build-arg instance_name=ncrc \
      --file ./Dockerfile-production \
      --cache-from $CI_REGISTRY_IMAGE:latest \
      --tag $IMAGE_ORG/$IMAGE_NAME:$CI_COMMIT_SHA \
      --tag $IMAGE_ORG/$IMAGE_NAME:latest .
      docker build --build-arg instance_name=ncrc --file ./Dockerfile-ci --cache-from $IMAGE_ORG/$IMAGE_NAME-dev:latest --tag $IMAGE_ORG/$IMAGE_NAME-dev:$CI_COMMIT_SHA --tag $IMAGE_ORG/$IMAGE_NAME-dev:latest .
      docker push $IMAGE_ORG/$IMAGE_NAME:$CI_COMMIT_SHA
      docker push $IMAGE_ORG/$IMAGE_NAME:latest
      docker push $IMAGE_ORG/$IMAGE_NAME-dev:$CI_COMMIT_SHA
      docker push $IMAGE_ORG/$IMAGE_NAME-dev:latest

deploy:
  stage: deploy
  image: docker:19.03.13
  before_script:
    - export SSH_KEY=$SSH_KEY_NCRC
    - export DOCKERHUB_USERNAME=$DOCKERHUB_USERNAME_ELIFE
    - export DOCKERHUB_PASSWORD=$DOCKERHUB_PASSWORD_ELIFE
    - export IMAGE_ORG=$IMAGE_ORG
    - export IMAGE_NAME=$IMAGE_NAME
    - eval $(ssh-agent -s)
    - echo "$SSH_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan $NCRC_SERVER_IP >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - |
      ssh ubuntu@$NCRC_SERVER_IP "sudo docker login -u $DOCKERHUB_USERNAME -p $DOCKERHUB_PASSWORD &&
      sudo docker pull $IMAGE_ORG/$IMAGE_NAME:latest &&
      sudo supervisorctl stop kotahi &&
      cd /home/ubuntu/kotahi &&
      sudo docker-compose down &&
      sudo supervisorctl start kotahi"

# lint:
#   allow_failure: true
#   image: $IMAGE_ORG/$IMAGE_NAME-dev:$CI_COMMIT_SHA
#   stage: test
#   variables:
#     GIT_STRATEGY: none
#   script:
#     - cd ${HOME}
#     - npm run lint

# test-chrome:
#   image: $IMAGE_ORG/$IMAGE_NAME-dev:$CI_COMMIT_SHA
#   stage: test
#   variables:
#     GIT_STRATEGY: none
#     # setup data for postgres image
#     POSTGRES_USER: kotahidev
#     POSTGRES_PASSWORD: kotahidev
#     # used by psql
#     PGUSER: kotahidev
#     PGPASSWORD: kotahidev
#     # this is used to ignore self signed certs
#     #START_SERVER_AND_TEST_INSECURE: 1
#   services:
#     - postgres
#   script:
#     - cd ${HOME}
#     - apt-get -y install postgresql-client
#     # this is needed for pgboss initial setup
#     - psql -h postgres -U kotahidev -d kotahidev -c "create extension pgcrypto;"
#     # use the example env for tests
#     - cp .env.example .env
#     # specify host here else it confuses the linked postgres image
#     - echo $INSTANCE_NAME
#     - POSTGRES_HOST=postgres yarn test:all:chrome:ncrc

# test-chrome-samsung:
#   image: $IMAGE_ORG/$IMAGE_NAME-dev:$CI_COMMIT_SHA
#   stage: test
#   variables:
#     GIT_STRATEGY: none
#     # setup data for postgres image
#     POSTGRES_USER: kotahidev
#     POSTGRES_PASSWORD: kotahidev
#     # used by psql
#     PGUSER: kotahidev
#     PGPASSWORD: kotahidev
#     # this is used to ignore self signed certs
#     #START_SERVER_AND_TEST_INSECURE: 1
#   services:
#     - postgres
#   script:
#     - cd ${HOME}
#     - apt-get -y install postgresql-client
#     - psql -h postgres -U kotahidev -d kotahidev -c "create extension pgcrypto;"
#     - cp .env.example .env
#     - POSTGRES_HOST=postgres yarn test:all:chrome:ncrc:samsung

# test-chrome-samsung-tablet:
#   image: $IMAGE_ORG/$IMAGE_NAME-dev:$CI_COMMIT_SHA
#   stage: test
#   variables:
#     GIT_STRATEGY: none
#     # setup data for postgres image
#     POSTGRES_USER: kotahidev
#     POSTGRES_PASSWORD: kotahidev
#     # used by psql
#     PGUSER: kotahidev
#     PGPASSWORD: kotahidev
#     # this is used to ignore self signed certs
#     #START_SERVER_AND_TEST_INSECURE: 1
#   services:
#     - postgres
#   script:
#     - cd ${HOME}
#     - apt-get -y install postgresql-client
#     - psql -h postgres -U kotahidev -d kotahidev -c "create extension pgcrypto;"
#     - cp .env.example .env
#     - POSTGRES_HOST=postgres yarn test:all:chrome:ncrc:samsung:tablet

# test-chrome-iPhone:
#   image: $IMAGE_ORG/$IMAGE_NAME-dev:$CI_COMMIT_SHA
#   stage: test
#   variables:
#     GIT_STRATEGY: none
#     # setup data for postgres image
#     POSTGRES_USER: kotahidev
#     POSTGRES_PASSWORD: kotahidev
#     # used by psql
#     PGUSER: kotahidev
#     PGPASSWORD: kotahidev
#     # this is used to ignore self signed certs
#     #START_SERVER_AND_TEST_INSECURE: 1
#   services:
#     - postgres
#   script:
#     - cd ${HOME}
#     - apt-get -y install postgresql-client
#     - psql -h postgres -U kotahidev -d kotahidev -c "create extension pgcrypto;"
#     - cp .env.example .env
#     - POSTGRES_HOST=postgres yarn test:all:chrome:ncrc:iPhone

# test-chrome-iPhone-tablet:
#   image: $IMAGE_ORG/$IMAGE_NAME-dev:$CI_COMMIT_SHA
#   stage: test
#   variables:
#     GIT_STRATEGY: none
#     # setup data for postgres image
#     POSTGRES_USER: kotahidev
#     POSTGRES_PASSWORD: kotahidev
#     # used by psql
#     PGUSER: kotahidev
#     PGPASSWORD: kotahidev
#     # this is used to ignore self signed certs
#     #START_SERVER_AND_TEST_INSECURE: 1
#   services:
#     - postgres
#   script:
#     - cd ${HOME}
#     - apt-get -y install postgresql-client
#     - psql -h postgres -U kotahidev -d kotahidev -c "create extension pgcrypto;"
#     - cp .env.example .env
#     - POSTGRES_HOST=postgres yarn test:all:chrome:ncrc:iPhone:tablet

# test-chrome-hd-laptop:
#   image: $IMAGE_ORG/$IMAGE_NAME-dev:$CI_COMMIT_SHA
#   stage: test
#   variables:
#     GIT_STRATEGY: none
#     # setup data for postgres image
#     POSTGRES_USER: kotahidev
#     POSTGRES_PASSWORD: kotahidev
#     # used by psql
#     PGUSER: kotahidev
#     PGPASSWORD: kotahidev
#     # this is used to ignore self signed certs
#     #START_SERVER_AND_TEST_INSECURE: 1
#   services:
#     - postgres
#   script:
#     - cd ${HOME}
#     - apt-get -y install postgresql-client
#     - psql -h postgres -U kotahidev -d kotahidev -c "create extension pgcrypto;"
#     - cp .env.example .env
#     - POSTGRES_HOST=postgres yarn test:all:chrome:ncrc:hd:laptop   

# test-firefox:
#   image: $IMAGE_ORG/$IMAGE_NAME-dev:$CI_COMMIT_SHA
#   stage: test
#   variables:
#     GIT_STRATEGY: none
#     # setup data for postgres image
#     POSTGRES_USER: kotahidev
#     POSTGRES_PASSWORD: kotahidev
#     # used by psql
#     PGUSER: kotahidev
#     PGPASSWORD: kotahidev
#     # this is used to ignore self signed certs
#     #START_SERVER_AND_TEST_INSECURE: 1
#   services:
#     - postgres
#   script:
#     - cd ${HOME}
#     - apt-get -y install postgresql-client
#     - psql -h postgres -U kotahidev -d kotahidev -c "create extension pgcrypto;"
#     - cp .env.example .env
#     - POSTGRES_HOST=postgres yarn test:all:firefox:ncrc

# test-firefox-samsung:
#   image: $IMAGE_ORG/$IMAGE_NAME-dev:$CI_COMMIT_SHA
#   stage: test
#   variables:
#     GIT_STRATEGY: none
#     # setup data for postgres image
#     POSTGRES_USER: kotahidev
#     POSTGRES_PASSWORD: kotahidev
#     # used by psql
#     PGUSER: kotahidev
#     PGPASSWORD: kotahidev
#     # this is used to ignore self signed certs
#     #START_SERVER_AND_TEST_INSECURE: 1
#   services:
#     - postgres
#   script:
#     - cd ${HOME}
#     - apt-get -y install postgresql-client
#     - psql -h postgres -U kotahidev -d kotahidev -c "create extension pgcrypto;"
#     - cp .env.example .env
#     - POSTGRES_HOST=postgres yarn test:all:firefox:ncrc:samsung

# test-firefox-samsung-tablet:
#   image: $IMAGE_ORG/$IMAGE_NAME-dev:$CI_COMMIT_SHA
#   stage: test
#   variables:
#     GIT_STRATEGY: none
#     # setup data for postgres image
#     POSTGRES_USER: kotahidev
#     POSTGRES_PASSWORD: kotahidev
#     # used by psql
#     PGUSER: kotahidev
#     PGPASSWORD: kotahidev
#     # this is used to ignore self signed certs
#     #START_SERVER_AND_TEST_INSECURE: 1
#   services:
#     - postgres
#   script:
#     - cd ${HOME}
#     - apt-get -y install postgresql-client
#     - psql -h postgres -U kotahidev -d kotahidev -c "create extension pgcrypto;"
#     - cp .env.example .env
#     - POSTGRES_HOST=postgres yarn test:all:firefox:ncrc:samsung:tablet

# test-firefox-iPhone:
#   image: $IMAGE_ORG/$IMAGE_NAME-dev:$CI_COMMIT_SHA
#   stage: test
#   variables:
#     GIT_STRATEGY: none
#     # setup data for postgres image
#     POSTGRES_USER: kotahidev
#     POSTGRES_PASSWORD: kotahidev
#     # used by psql
#     PGUSER: kotahidev
#     PGPASSWORD: kotahidev
#     # this is used to ignore self signed certs
#     #START_SERVER_AND_TEST_INSECURE: 1
#   services:
#     - postgres
#   script:
#     - cd ${HOME}
#     - apt-get -y install postgresql-client
#     - psql -h postgres -U kotahidev -d kotahidev -c "create extension pgcrypto;"
#     - cp .env.example .env
#     - POSTGRES_HOST=postgres yarn test:all:firefox:ncrc:iPhone

# test-firefox-iPhone-tablet:
#   image: $IMAGE_ORG/$IMAGE_NAME-dev:$CI_COMMIT_SHA
#   stage: test
#   variables:
#     GIT_STRATEGY: none
#     # setup data for postgres image
#     POSTGRES_USER: kotahidev
#     POSTGRES_PASSWORD: kotahidev
#     # used by psql
#     PGUSER: kotahidev
#     PGPASSWORD: kotahidev
#     # this is used to ignore self signed certs
#     #START_SERVER_AND_TEST_INSECURE: 1
#   services:
#     - postgres
#   script:
#     - cd ${HOME}
#     - apt-get -y install postgresql-client
#     - psql -h postgres -U kotahidev -d kotahidev -c "create extension pgcrypto;"
#     - cp .env.example .env
#     - POSTGRES_HOST=postgres yarn test:all:firefox:ncrc:iPhone:tablet

# test-firefox-hd-laptop:
#   image: $IMAGE_ORG/$IMAGE_NAME-dev:$CI_COMMIT_SHA
#   stage: test
#   variables:
#     GIT_STRATEGY: none
#     # setup data for postgres image
#     POSTGRES_USER: kotahidev
#     POSTGRES_PASSWORD: kotahidev
#     # used by psql
#     PGUSER: kotahidev
#     PGPASSWORD: kotahidev
#     # this is used to ignore self signed certs
#     #START_SERVER_AND_TEST_INSECURE: 1
#   services:
#     - postgres
#   script:
#     - cd ${HOME}
#     - apt-get -y install postgresql-client
#     - psql -h postgres -U kotahidev -d kotahidev -c "create extension pgcrypto;"
#     - cp .env.example .env
#     - POSTGRES_HOST=postgres yarn test:all:firefox:ncrc:hd:laptop

