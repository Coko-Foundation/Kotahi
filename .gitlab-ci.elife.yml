variables:
  IMAGE_ORG: kotahi
  IMAGE_NAME: kotahi-elife
  REGION: us-east-1

stages:
  #cache
  - build
  #- deploy
  - test

# cache:
#   image:
#     name: banst/awscli
#     entrypoint: [""]
#   script:
#     - aws configure set region $REGION
#     - aws s3 cp s3://elife-node-modules/node_modules_dev.tar.gz .

build:
  image: docker:20.10.5
  variables:
    DOCKER_BUILDKIT: 1
  services:
    - docker:20.10.5-dind
  stage: build
  # dependencies: 
  #   - cache
  before_script:
    - cp app/brand-instances-configs/elife.json app/brandConfig.json
  script:
    - |
      if [ -z "$DOCKERHUB_USERNAME_ELIFE" ] || [ -z "$DOCKERHUB_PASSWORD_ELIFE" ]; then echo "Not pushing" && exit 0; fi
      docker login -u $DOCKERHUB_USERNAME_ELIFE -p $DOCKERHUB_PASSWORD_ELIFE
      docker pull $IMAGE_ORG/$IMAGE_NAME-dev:latest || true
      docker build --build-arg instance_name=elife --file ./Dockerfile-ci --cache-from $IMAGE_ORG/$IMAGE_NAME-dev:latest --tag $IMAGE_ORG/$IMAGE_NAME-dev:$CI_COMMIT_SHA --tag $IMAGE_ORG/$IMAGE_NAME-dev:latest .
      docker push $IMAGE_ORG/$IMAGE_NAME-dev:$CI_COMMIT_SHA
      docker push $IMAGE_ORG/$IMAGE_NAME-dev:latest
      # docker build \
      # --build-arg instance_name=elife \
      # --build-arg public_client_host=elife.kotahi.cloud \
      # --build-arg public_client_port=443 \
      # --build-arg public_client_protocol=https \
      # --file ./Dockerfile-production-elife \
      # --cache-from $IMAGE_ORG/$IMAGE_NAME:latest \
      # --tag $IMAGE_ORG/$IMAGE_NAME:$CI_COMMIT_SHA \
      # --tag ${env.IMAGE_ORG}/${env.IMAGE_NAME}:latest .
      # docker push $IMAGE_ORG/$IMAGE_NAME:$CI_COMMIT_SHA
      # docker push $IMAGE_ORG/$IMAGE_NAME:latest
      # rm -rf node_modules_dev.tar.gz

# deploy:
#   stage: deploy
#   image: ubuntu:18.04
#   script:
#     - |
#       aws --region=$REGION eks update-kubeconfig --name eks-elife-kotahi
#       curl https://baltocdn.com/helm/signing.asc | sudo apt-key add -
#       curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
#       apt-get install apt-transport-https --yes
#       echo "deb https://baltocdn.com/helm/stable/debian/ all main" | sudo tee /etc/apt/sources.list.d/helm-stable-debian.list
#       echo "deb http://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list
#       apt-get update
#       apt-get install helm kubectl -y
#       #helm del ${instance_name}-kotahi-prod
#       helm upgrade elife-kotahi-prod ./helm/kotahi \
#       --set images.backend.repository=$IMAGE_ORG/$IMAGE_NAME \
#       --set images.backend.tag=$CI_COMMIT_SHA \
#       --set images.jobxsweet.repository=pubsweet/job-xsweet \
#       --set images.jobxsweet.tag=1.5.1 \
#       --set backend.deployment.containerPort=3000 \
#       --set backend.ingress.port=80 \
#       --set backend.ingress.targetPort=3000 \
#       --set backend.service.port=80 \
#       --set backend.service.targetPort=3000 \
#       --set rdssecret=elife-kotahi-prod-rds-postgres \
#       --set s3secret=elife-kotahi-prod-s3-attachment \
#       --install \
#       --force \
#       --wait
#       helm ls
#       kubectl get pods | grep server && kubectl get pods | grep job-xsweet

# lint:
#   allow_failure: true
#   image: $IMAGE_ORG/$IMAGE_NAME-dev:$CI_COMMIT_SHA
#   stage: test
#   variables:
#     GIT_STRATEGY: none
#   script:
#     - cd ${HOME}
#     - npm run lint

## TODO: implement this template without error "(node:965) UnhandledPromiseRejectionWarning: TypeError [ERR_INVALID_ARG_TYPE]: The "path" argument must be of type string. Received undefined"
## Issue: https://gitlab.coko.foundation/kotahi/kotahi/-/issues/183
# .test_template: &run_test_template
#   image: $IMAGE_ORG/$IMAGE_NAME-dev:$CI_COMMIT_SHA
#   stage: test
#   variables:
#     GIT_STRATEGY: none
#     # setup data for postgres image
#     POSTGRES_USER: kotahidev
#     POSTGRES_PASSWORD: kotahidev
#     # used by psql
#     PGUSER: kotahidev
#     PGPASSWORD: kotahidev
#     # this is used to ignore self signed certs
#     #START_SERVER_AND_TEST_INSECURE: 1
#   services:
#     - postgres

## TODO: implement this template without error "psql: could not translate host name "postgres" to address: Name or service not known"
## Issue: https://gitlab.coko.foundation/kotahi/kotahi/-/issues/183
# .script_template: &run_script_template
#    - cd ${HOME}
#    - apt-get -y install postgresql-client
#    # use the example env for tests
#    - cp .env.example .env
#    # this is needed for pgboss initial setup
#    - psql -h postgres -U kotahidev -d kotahidev -c "create extension pgcrypto;"
#    # specify host here else it confuses the linked postgres image
#    - POSTGRES_HOST=postgres yarn test:all:$TEST_ITEM

# test-chrome:
#   <<: *run_test_template
#   variables:
#     TEST_ITEM: "chrome:elife"
#   script:
#     - *run_script_template

## TODO: when insert this template get an error: "(node:965) UnhandledPromiseRejectionWarning: TypeError [ERR_INVALID_ARG_TYPE]: The "path" argument must be of type string"
# .vars_template: &vars_insert
#   variables:
#     GIT_STRATEGY: none
#     POSTGRES_USER: kotahidev
#     POSTGRES_PASSWORD: kotahidev
#     PGUSER: kotahidev
#     PGPASSWORD: kotahidev

test-chrome:
  image: $IMAGE_ORG/$IMAGE_NAME-dev:$CI_COMMIT_SHA
  stage: test
  variables:
    GIT_STRATEGY: none
    # setup data for postgres image
    POSTGRES_USER: kotahidev
    POSTGRES_PASSWORD: kotahidev
    # used by psql
    PGUSER: kotahidev
    PGPASSWORD: kotahidev
    # this is used to ignore self signed certs
    #START_SERVER_AND_TEST_INSECURE: 1
  services:
    - postgres
  script:
    - cd ${HOME}
    - apt-get update
    - apt-get -y install postgresql-client
    # this is needed for pgboss initial setup
    - psql -h postgres -U kotahidev -d kotahidev -c "create extension pgcrypto;"
    # use the example env for tests
    - cp .env.example .env
    # specify host here else it confuses the linked postgres image
    - echo $INSTANCE_NAME
    - POSTGRES_HOST=postgres yarn test:all:chrome:elife


# test-chrome-samsung:
#   image: $IMAGE_ORG/$IMAGE_NAME-dev:$CI_COMMIT_SHA
#   stage: test
#   variables:
#     GIT_STRATEGY: none
#     # setup data for postgres image
#     POSTGRES_USER: kotahidev
#     POSTGRES_PASSWORD: kotahidev
#     # used by psql
#     PGUSER: kotahidev
#     PGPASSWORD: kotahidev
#     # this is used to ignore self signed certs
#     #START_SERVER_AND_TEST_INSECURE: 1
#   services:
#     - postgres
#   script:
#     - cd ${HOME}
#     - apt-get -y install postgresql-client
#     - psql -h postgres -U kotahidev -d kotahidev -c "create extension pgcrypto;"
#     - cp .env.example .env
#     - POSTGRES_HOST=postgres yarn test:all:chrome:elife:samsung

# test-chrome-samsung-tablet:
#   image: $IMAGE_ORG/$IMAGE_NAME-dev:$CI_COMMIT_SHA
#   stage: test
#   variables:
#     GIT_STRATEGY: none
#     # setup data for postgres image
#     POSTGRES_USER: kotahidev
#     POSTGRES_PASSWORD: kotahidev
#     # used by psql
#     PGUSER: kotahidev
#     PGPASSWORD: kotahidev
#     # this is used to ignore self signed certs
#     #START_SERVER_AND_TEST_INSECURE: 1
#   services:
#     - postgres
#   script:
#     - cd ${HOME}
#     - apt-get -y install postgresql-client
#     - psql -h postgres -U kotahidev -d kotahidev -c "create extension pgcrypto;"
#     - cp .env.example .env
#     - POSTGRES_HOST=postgres yarn test:all:chrome:elife:samsung:tablet

# test-chrome-iPhone:
#   image: $IMAGE_ORG/$IMAGE_NAME-dev:$CI_COMMIT_SHA
#   stage: test
#   variables:
#     GIT_STRATEGY: none
#     # setup data for postgres image
#     POSTGRES_USER: kotahidev
#     POSTGRES_PASSWORD: kotahidev
#     # used by psql
#     PGUSER: kotahidev
#     PGPASSWORD: kotahidev
#     # this is used to ignore self signed certs
#     #START_SERVER_AND_TEST_INSECURE: 1
#   services:
#     - postgres
#   script:
#     - cd ${HOME}
#     - apt-get -y install postgresql-client
#     - psql -h postgres -U kotahidev -d kotahidev -c "create extension pgcrypto;"
#     - cp .env.example .env
#     - POSTGRES_HOST=postgres yarn test:all:chrome:elife:iPhone

# test-chrome-iPhone-tablet:
#   image: $IMAGE_ORG/$IMAGE_NAME-dev:$CI_COMMIT_SHA
#   stage: test
#   variables:
#     GIT_STRATEGY: none
#     # setup data for postgres image
#     POSTGRES_USER: kotahidev
#     POSTGRES_PASSWORD: kotahidev
#     # used by psql
#     PGUSER: kotahidev
#     PGPASSWORD: kotahidev
#     # this is used to ignore self signed certs
#     #START_SERVER_AND_TEST_INSECURE: 1
#   services:
#     - postgres
#   script:
#     - cd ${HOME}
#     - apt-get -y install postgresql-client
#     - psql -h postgres -U kotahidev -d kotahidev -c "create extension pgcrypto;"
#     - cp .env.example .env
#     - POSTGRES_HOST=postgres yarn test:all:chrome:elife:iPhone:tablet

# test-chrome-hd-laptop:
#   image: $IMAGE_ORG/$IMAGE_NAME-dev:$CI_COMMIT_SHA
#   stage: test
#   variables:
#     GIT_STRATEGY: none
#     # setup data for postgres image
#     POSTGRES_USER: kotahidev
#     POSTGRES_PASSWORD: kotahidev
#     # used by psql
#     PGUSER: kotahidev
#     PGPASSWORD: kotahidev
#     # this is used to ignore self signed certs
#     #START_SERVER_AND_TEST_INSECURE: 1
#   services:
#     - postgres
#   script:
#     - cd ${HOME}
#     - apt-get -y install postgresql-client
#     - psql -h postgres -U kotahidev -d kotahidev -c "create extension pgcrypto;"
#     - cp .env.example .env
#     - POSTGRES_HOST=postgres yarn test:all:chrome:elife:hd:laptop

test-firefox:
  image: $IMAGE_ORG/$IMAGE_NAME-dev:$CI_COMMIT_SHA
  stage: test
  variables:
    GIT_STRATEGY: none
    # setup data for postgres image
    POSTGRES_USER: kotahidev
    POSTGRES_PASSWORD: kotahidev
    # used by psql
    PGUSER: kotahidev
    PGPASSWORD: kotahidev
    # this is used to ignore self signed certs
    #START_SERVER_AND_TEST_INSECURE: 1
  services:
    - postgres
  script:
    - cd ${HOME}
    - apt-get -y install postgresql-client
    - psql -h postgres -U kotahidev -d kotahidev -c "create extension pgcrypto;"
    - cp .env.example .env
    - POSTGRES_HOST=postgres yarn test:all:firefox:elife

# test-firefox-samsung:
#   image: $IMAGE_ORG/$IMAGE_NAME-dev:$CI_COMMIT_SHA
#   stage: test
#   variables:
#     GIT_STRATEGY: none
#     # setup data for postgres image
#     POSTGRES_USER: kotahidev
#     POSTGRES_PASSWORD: kotahidev
#     # used by psql
#     PGUSER: kotahidev
#     PGPASSWORD: kotahidev
#     # this is used to ignore self signed certs
#     #START_SERVER_AND_TEST_INSECURE: 1
#   services:
#     - postgres
#   script:
#     - cd ${HOME}
#     - apt-get -y install postgresql-client
#     - psql -h postgres -U kotahidev -d kotahidev -c "create extension pgcrypto;"
#     - cp .env.example .env
#     - POSTGRES_HOST=postgres yarn test:all:firefox:elife:samsung

# test-firefox-samsung-tablet:
#   image: $IMAGE_ORG/$IMAGE_NAME-dev:$CI_COMMIT_SHA
#   stage: test
#   variables:
#     GIT_STRATEGY: none
#     # setup data for postgres image
#     POSTGRES_USER: kotahidev
#     POSTGRES_PASSWORD: kotahidev
#     # used by psql
#     PGUSER: kotahidev
#     PGPASSWORD: kotahidev
#     # this is used to ignore self signed certs
#     #START_SERVER_AND_TEST_INSECURE: 1
#   services:
#     - postgres
#   script:
#     - cd ${HOME}
#     - apt-get -y install postgresql-client
#     - psql -h postgres -U kotahidev -d kotahidev -c "create extension pgcrypto;"
#     - cp .env.example .env
#     - POSTGRES_HOST=postgres yarn test:all:firefox:elife:samsung:tablet

# test-firefox-iPhone:
#   image: $IMAGE_ORG/$IMAGE_NAME-dev:$CI_COMMIT_SHA
#   stage: test
#   variables:
#     GIT_STRATEGY: none
#     # setup data for postgres image
#     POSTGRES_USER: kotahidev
#     POSTGRES_PASSWORD: kotahidev
#     # used by psql
#     PGUSER: kotahidev
#     PGPASSWORD: kotahidev
#     # this is used to ignore self signed certs
#     #START_SERVER_AND_TEST_INSECURE: 1
#   services:
#     - postgres
#   script:
#     - cd ${HOME}
#     - apt-get -y install postgresql-client
#     - psql -h postgres -U kotahidev -d kotahidev -c "create extension pgcrypto;"
#     - cp .env.example .env
#     - POSTGRES_HOST=postgres yarn test:all:firefox:elife:iPhone

# test-firefox-iPhone-tablet:
#   image: $IMAGE_ORG/$IMAGE_NAME-dev:$CI_COMMIT_SHA
#   stage: test
#   variables:
#     GIT_STRATEGY: none
#     # setup data for postgres image
#     POSTGRES_USER: kotahidev
#     POSTGRES_PASSWORD: kotahidev
#     # used by psql
#     PGUSER: kotahidev
#     PGPASSWORD: kotahidev
#     # this is used to ignore self signed certs
#     #START_SERVER_AND_TEST_INSECURE: 1
#   services:
#     - postgres
#   script:
#     - cd ${HOME}
#     - apt-get -y install postgresql-client
#     - psql -h postgres -U kotahidev -d kotahidev -c "create extension pgcrypto;"
#     - cp .env.example .env
#     - POSTGRES_HOST=postgres yarn test:all:firefox:elife:iPhone:tablet

# test-firefox-hd-laptop:
#   image: $IMAGE_ORG/$IMAGE_NAME-dev:$CI_COMMIT_SHA
#   stage: test
#   variables:
#     GIT_STRATEGY: none
#     # setup data for postgres image
#     POSTGRES_USER: kotahidev
#     POSTGRES_PASSWORD: kotahidev
#     # used by psql
#     PGUSER: kotahidev
#     PGPASSWORD: kotahidev
#     # this is used to ignore self signed certs
#     #START_SERVER_AND_TEST_INSECURE: 1
#   services:
#     - postgres
#   script:
#     - cd ${HOME}
#     - apt-get -y install postgresql-client
#     - psql -h postgres -U kotahidev -d kotahidev -c "create extension pgcrypto;"
#     - cp .env.example .env
#     - POSTGRES_HOST=postgres yarn test:all:firefox:elife:hd:laptop

