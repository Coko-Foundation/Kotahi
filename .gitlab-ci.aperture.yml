variables:
  IMAGE_ORG: simplej
  IMAGE_NAME: simplej
  POSTGRES_HOST_AUTH_METHOD: trust
  POSTGRES_USER: kotahidev
  POSTGRES_PASSWORD: kotahidev
  PGUSER: kotahidev
  PGPASSWORD: kotahidev

stages:
  - build
  - test
  # - review
  # - staging
  # - production
  # - demo

build:
  image: docker:20.10.5
  variables:
    DOCKER_BUILDKIT: 1
  services:
    - docker:20.10.5-dind
  stage: build
  before_script:
    - cp app/brand-instances-configs/aperture.json app/brandConfig.json
  script:
    - |
      if [ -z "$DOCKERHUB_USERNAME" ] || [ -z "$DOCKERHUB_PASSWORD" ]; then echo "Not pushing" && exit 0; fi
      docker login -u $DOCKERHUB_USERNAME -p $DOCKERHUB_PASSWORD
      docker build --build-arg instance_name=aperture --file ./Dockerfile-ci --cache-from $IMAGE_ORG/$IMAGE_NAME:latest --tag $IMAGE_ORG/$IMAGE_NAME:$CI_COMMIT_SHA --tag $IMAGE_ORG/$IMAGE_NAME:latest .   
      docker push $IMAGE_ORG/$IMAGE_NAME:$CI_COMMIT_SHA
      docker push $IMAGE_ORG/$IMAGE_NAME:latest

lint:
  # allow_failure: true
  image: $IMAGE_ORG/$IMAGE_NAME:$CI_COMMIT_SHA
  stage: test
  variables:
    GIT_STRATEGY: none
  script:
    - cd ${HOME}
    - yarn lint

.test_template: &run_test_template
  image: $IMAGE_ORG/$IMAGE_NAME:$CI_COMMIT_SHA
  stage: test
  variables:
    GIT_STRATEGY: none
  services:
    - postgres

.test_before_script: &run_test_before_script
  - apt-get update
  - apt-get -y install postgresql-client
  - psql -h postgres -U kotahidev -d kotahidev -c "create extension pgcrypto;"

.test_script: &run_test_script
  - cd ${HOME}
  - cp .env.example .env
  - POSTGRES_HOST=postgres yarn test:all:$TEST_ITEM

test-chrome:
  before_script:
    - *run_test_before_script
  <<: *run_test_template
  variables:
    TEST_ITEM: 'chrome'
  script:
    - *run_test_script

test-firefox:
  before_script:
    - *run_test_before_script
  <<: *run_test_template
  variables:
    TEST_ITEM: 'firefox'
  script:
    - *run_test_script
# test-chrome:
#   image: $IMAGE_ORG/$IMAGE_NAME:$CI_COMMIT_SHA
#   stage: test
#   variables:
#     GIT_STRATEGY: none
#     # setup data for postgres image
#     POSTGRES_USER: kotahidev
#     POSTGRES_PASSWORD: kotahidev
#     # used by psql
#     PGUSER: kotahidev
#     PGPASSWORD: kotahidev
#     # this is used to ignore self signed certs
#     #START_SERVER_AND_TEST_INSECURE: 1
#   services:
#     - postgres
#   script:
#     - cd ${HOME}
#     - apt-get update
#     - apt-get -y install postgresql-client
#     # this is needed for pgboss initial setup
#     - psql -h postgres -U kotahidev -d kotahidev -c "create extension pgcrypto;"
#     # use the example env for tests
#     - cp .env.example .env
#     # specify host here else it confuses the linked postgres image
#     - POSTGRES_HOST=postgres yarn test:all:chrome

# test-firefox:
#   allow_failure: true # at this point Cypress' support for Firefox is not stable
#   image: $IMAGE_ORG/$IMAGE_NAME:$CI_COMMIT_SHA
#   stage: test
#   variables:
#     GIT_STRATEGY: none
#     # setup data for postgres image
#     POSTGRES_USER: kotahidev
#     POSTGRES_PASSWORD: kotahidev
#     # used by psql
#     PGUSER: kotahidev
#     PGPASSWORD: kotahidev
#     #START_SERVER_AND_TEST_INSECURE: 1
#   services:
#     - postgres
#   script:
#     - cd ${HOME}
#     - apt-get update
#     - apt-get -y install postgresql-client
#     # this is needed for pgboss initial setup
#     - psql -h postgres -U kotahidev -d kotahidev -c "create extension pgcrypto;"
#     # use the example env for tests
#     - cp .env.example .env
#     # specify host here else it confuses the linked postgres image
#     - POSTGRES_HOST=postgres yarn test:all:firefox
