extend type Query {
  user(id: ID): User
  users: [User]
  paginatedUsers(sort: UsersSort, offset: Int, limit: Int): PaginatedUsers
  searchUsers(teamId: ID, query: String): [User]
  channelUsersForMention(channelId: ID!): [User]
}

type PaginatedUsers {
  totalCount: Int
  users: [User]
}

type SendEmailResponse {
  success: Boolean!
  errorMessage: String
}

type SendEmailPayload {
  invitation: Invitation
  response: SendEmailResponse!
}

extend type Mutation {
  deleteUser(id: ID): User
  updateUser(id: ID, input: String): User
  updateUsername(id: ID!, username: String!): User
  updateLanguage(id: ID!, preferredLanguage: String!): User
  sendEmail(input: String!): SendEmailPayload!
  updateEmail(id: ID!, email: String!): UpdateEmailResponse
  updateRecentTab(tab: String): User
  updateMenuUI(expanded: Boolean!): User!
  setGlobalRole(userId: ID!, role: String!, shouldEnable: Boolean!): User!
  setGroupRole(userId: ID!, role: String!, shouldEnable: Boolean!): User!
  expandChat(state: Boolean!): User!
}

type UpdateEmailResponse {
  success: Boolean
  error: String
  user: User
}

enum UsersSort {
  username_ASC
  username_DESC
  email_ASC
  email_DESC
  created_ASC
  created_DESC
  lastOnline_ASC
  lastOnline_DESC
}

type User {
  id: ID!
  created: DateTime!
  updated: DateTime
  username: String
  email: String
  groupRoles: [String]
  globalRoles: [String]
  preferredLanguage: String
  identities: [Identity]
  defaultIdentity: Identity
  file: File
  profilePicture: String
  online: Boolean
  lastOnline: DateTime
  isOnline: Boolean
  recentTab: String
  chatExpanded: Boolean!
  menuPinned: Boolean!
}

type CurrentRole {
  id: ID
  roles: [String]
}

type Identity {
  id: ID
  name: String
  aff: String # JATS <aff>
  email: String # JATS <aff>
  type: String
  identifier: String
}

input UserInput {
  username: String!
  email: String!
  password: String
  rev: String
  globalRoles: [String!]
  groupRoles: [String!]
}

# Authentication

extend type Query {
  # Get the currently authenticated user based on the JWT in the HTTP headers
  currentUser: User
}

# User details and bearer token
type LoginResult {
  user: User!
  token: String!
}

input LoginUserInput {
  username: String!
  password: String!
}

# Common types
scalar DateTime
