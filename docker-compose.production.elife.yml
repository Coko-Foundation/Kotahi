version: '3'

services:
  server:
    image: kotahi/kotahi-elife:latest
    depends_on:
      - db
    ports:
      - ${SERVER_PORT:-3000}:${SERVER_PORT:-3000}
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - POSTGRES_HOST=${POSTGRES_HOST:-db}
      - POSTGRES_PORT=${POSTGRES_PORT:-5432}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - PUBSWEET_SECRET=${PUBSWEET_SECRET}
      - CLIENT_PROTOCOL=${CLIENT_PROTOCOL}
      - CLIENT_HOST=${CLIENT_HOST}
      - CLIENT_PORT=${CLIENT_PORT}
      - PUBLIC_CLIENT_PROTOCOL=${PUBLIC_CLIENT_PROTOCOL:-https}
      - PUBLIC_CLIENT_HOST=${PUBLIC_CLIENT_HOST:-elife.kotahi.cloud}
      - PUBLIC_CLIENT_PORT=${PUBLIC_CLIENT_PORT:-443}
      - SERVER_PROTOCOL=${SERVER_PROTOCOL}
      - SERVER_HOST=${SERVER_HOST}
      - SERVER_PORT=${SERVER_PORT}
      - ORCID_CLIENT_ID=${ORCID_CLIENT_ID}
      - ORCID_CLIENT_SECRET=${ORCID_CLIENT_SECRET}
      - USE_SANDBOXED_ORCID=${USE_SANDBOXED_ORCID:-false}
      - INSTANCE_NAME=${INSTANCE_NAME:-elife}
      - S3_ACCESS_KEY_ID=${S3_ACCESS_KEY_ID}
      - S3_ACCESS_KEY_SECRET=${S3_ACCESS_KEY_SECRET}
      - S3_ENDPOINT=${S3_ENDPOINT}
      - S3_REGION=${S3_REGION}
      - HYPOTHESIS_API_KEY=${HYPOTHESIS_API_KEY}
      - HYPOTHESIS_GROUP=${HYPOTHESIS_GROUP}
      - HYPOTHESIS_PUBLISH_FIELDS=${HYPOTHESIS_PUBLISH_FIELDS}
      - CROSSREF_LOGIN=${CROSSREF_LOGIN:-}
      - CROSSREF_PASSWORD=${CROSSREF_PASSWORD:-}
      - CROSSREF_REGISTRANT="${CROSSREF_REGISTRANT:-eLife}"
      - CROSSREF_DEPOSITOR_NAME="${CROSSREF_DEPOSITOR_NAME:-eLife Kotahi}"
      - CROSSREF_DEPOSITOR_EMAIL="${CROSSREF_DEPOSITOR_EMAIL:-elife-kotahi@kotahi.cloud}"
      - DOI_PREFIX=${DOI_PREFIX:-10.7554}
      - MANUSCRIPTS_TABLE_COLUMNS=${MANUSCRIPTS_TABLE_COLUMNS}
      - REVIEW_SHARED=${REVIEW_SHARED:-false}
      - REVIEW_HIDE=${REVIEW_HIDE:-false}
      - NOTIFICATION_EMAIL_AUTOMATED=${NOTIFICATION_EMAIL_AUTOMATED:-false}
      - PAGED_JS_CLIENT_ID=${PAGED_JS_CLIENT_ID}
      - PAGED_JS_CLIENT_SECRET=${PAGED_JS_CLIENT_SECRET}

    volumes:
      - ./uploads:/home/node/app/uploads

    entrypoint:
      [
        'bash',
        './scripts/wait-for-it.sh',
        '${POSTGRES_HOST:-db}:${POSTGRES_PORT:-5432}',
        '--',
        'sh',
        'scripts/setupProdServer.sh',
      ]
    command: ['node', './startServer.js']
  db:
    image: postgres:10-alpine
    ports:
      - ${POSTGRES_PORT:-5432}:5432
    environment:
      - POSTGRES_USER
      - POSTGRES_DB
      - POSTGRES_PASSWORD
      - PGDATA=/var/lib/postgresql/data/kotahi
    volumes:
      - ./scripts/test.sql:/docker-entrypoint-initdb.d/test.sql
      - ./db-data:/var/lib/postgresql/data/kotahi:z

  job-xsweet:
    image: pubsweet/job-xsweet:1.5.4
    environment:
      - POSTGRES_HOST
      - POSTGRES_USER
      - POSTGRES_PORT
      - POSTGRES_PASSWORD
      - POSTGRES_DB
    depends_on:
      - server
    command:
      [
        'bash',
        './scripts/wait-for-it.sh',
        'server:${SERVER_PORT}',
        --,
        'node',
        'src/xsweet.js',
      ]
    volumes:
      - ./scripts/wait-for-it.sh:/home/node/scripts/wait-for-it.sh

  minio:
    image: minio/minio
    command: ['server', '/data']
    volumes:
      - ./minio/data:/data
    ports:
      - 9000:9000
    environment:
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY:-test} #Access key length should be at least 3 characters
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY:-password} #Secret key length should be at least 8 characters

  pagedjs:
    depends_on:
      - db-pagedjs
    image: cokoapps/pagedjs:1.4.0
    ports:
      - ${SERVICE_PAGEDJS_PORT:-3003}:${SERVICE_PAGEDJS_PORT:-3003}
    environment:
      - PUBSWEET_SECRET=pagedjs_dev_secret
      - POSTGRES_USER=pagedjs_user_dev
      - POSTGRES_PASSWORD=pagedjs_user_password
      - POSTGRES_HOST=db-pagedjs
      - POSTGRES_DB=pagedjs_dev
      - POSTGRES_PORT=5432
      - SERVER_PORT=${SERVICE_PAGEDJS_PORT:-3003}
      - SERVER_PROTOCOL=http
      - SERVER_HOST=localhost
      - NODE_ENV=development
    security_opt:
      - seccomp:unconfined
    entrypoint:
      [
        'node_modules/.bin/wait-for-it',
        'db-pagedjs:5432',
        '--',
        'sh',
        'scripts/setupDevServer.sh',
      ]
    command: ['node', './server/startServer.js']

  db-pagedjs:
    image: postgres:12-alpine
    environment:
      - POSTGRES_USER=pagedjs_user_dev
      - POSTGRES_DB=pagedjs_dev
      - POSTGRES_PASSWORD=pagedjs_user_password
    volumes:
      - ./scripts/init-pgboss.sql:/docker-entrypoint-initdb.d/init-pgboss.sql
volumes:
  db-data:
    driver: local
